/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ContentField,
  ImageFieldData,
  LinkFieldData,
} from './models/content-models';
import {
  ContentMode,
} from './models/component-models';
import {
  EventObj,
} from './components/editors/rich-text-editor/rich-text-editor-component';
import {
  TinyMceSettings,
} from './models/tinymce-models';

export namespace Components {
  interface AlaskaContentField {
    'setField': (field: ContentField<any>) => Promise<void>;
    'setMode': (mode: ContentMode) => Promise<void>;
  }
  interface AlaskaContentFieldDefault {
    'field': ContentField<any>;
  }
  interface AlaskaContentFieldEditor {
    'field': ContentField<any>;
  }
  interface AlaskaHtmlField {
    'field': ContentField<any>;
  }
  interface AlaskaHtmlFieldEditor {
    'field': ContentField<any>;
  }
  interface AlaskaImageField {
    'field': ContentField<ImageFieldData>;
  }
  interface AlaskaImageFieldEditor {
    'field': ContentField<ImageFieldData>;
  }
  interface AlaskaLinkField {
    'field': ContentField<LinkFieldData>;
  }
  interface AlaskaLinkFieldEditor {
    'field': ContentField<LinkFieldData>;
  }
  interface AlaskaRichTextEditor {
    'contentCss': string;
    'fontFormats': string;
    'height': string;
    'initialize': (settings: TinyMceSettings, value: string, callback?: () => void) => Promise<void>;
    'inline': boolean;
    'mobileTheme': string;
    'plugins': string;
    'resize': boolean;
    'setValue': (value: string) => Promise<void>;
    'skin': string;
    'toolbar': string;
  }
  interface AlaskaTextField {
    'field': ContentField<string>;
    'setField': (field: ContentField<string>) => Promise<void>;
  }
  interface AlaskaTextFieldEditor {
    'field': ContentField<string>;
  }
}

declare global {


  interface HTMLAlaskaContentFieldElement extends Components.AlaskaContentField, HTMLStencilElement {}
  var HTMLAlaskaContentFieldElement: {
    prototype: HTMLAlaskaContentFieldElement;
    new (): HTMLAlaskaContentFieldElement;
  };

  interface HTMLAlaskaContentFieldDefaultElement extends Components.AlaskaContentFieldDefault, HTMLStencilElement {}
  var HTMLAlaskaContentFieldDefaultElement: {
    prototype: HTMLAlaskaContentFieldDefaultElement;
    new (): HTMLAlaskaContentFieldDefaultElement;
  };

  interface HTMLAlaskaContentFieldEditorElement extends Components.AlaskaContentFieldEditor, HTMLStencilElement {}
  var HTMLAlaskaContentFieldEditorElement: {
    prototype: HTMLAlaskaContentFieldEditorElement;
    new (): HTMLAlaskaContentFieldEditorElement;
  };

  interface HTMLAlaskaHtmlFieldElement extends Components.AlaskaHtmlField, HTMLStencilElement {}
  var HTMLAlaskaHtmlFieldElement: {
    prototype: HTMLAlaskaHtmlFieldElement;
    new (): HTMLAlaskaHtmlFieldElement;
  };

  interface HTMLAlaskaHtmlFieldEditorElement extends Components.AlaskaHtmlFieldEditor, HTMLStencilElement {}
  var HTMLAlaskaHtmlFieldEditorElement: {
    prototype: HTMLAlaskaHtmlFieldEditorElement;
    new (): HTMLAlaskaHtmlFieldEditorElement;
  };

  interface HTMLAlaskaImageFieldElement extends Components.AlaskaImageField, HTMLStencilElement {}
  var HTMLAlaskaImageFieldElement: {
    prototype: HTMLAlaskaImageFieldElement;
    new (): HTMLAlaskaImageFieldElement;
  };

  interface HTMLAlaskaImageFieldEditorElement extends Components.AlaskaImageFieldEditor, HTMLStencilElement {}
  var HTMLAlaskaImageFieldEditorElement: {
    prototype: HTMLAlaskaImageFieldEditorElement;
    new (): HTMLAlaskaImageFieldEditorElement;
  };

  interface HTMLAlaskaLinkFieldElement extends Components.AlaskaLinkField, HTMLStencilElement {}
  var HTMLAlaskaLinkFieldElement: {
    prototype: HTMLAlaskaLinkFieldElement;
    new (): HTMLAlaskaLinkFieldElement;
  };

  interface HTMLAlaskaLinkFieldEditorElement extends Components.AlaskaLinkFieldEditor, HTMLStencilElement {}
  var HTMLAlaskaLinkFieldEditorElement: {
    prototype: HTMLAlaskaLinkFieldEditorElement;
    new (): HTMLAlaskaLinkFieldEditorElement;
  };

  interface HTMLAlaskaRichTextEditorElement extends Components.AlaskaRichTextEditor, HTMLStencilElement {}
  var HTMLAlaskaRichTextEditorElement: {
    prototype: HTMLAlaskaRichTextEditorElement;
    new (): HTMLAlaskaRichTextEditorElement;
  };

  interface HTMLAlaskaTextFieldElement extends Components.AlaskaTextField, HTMLStencilElement {}
  var HTMLAlaskaTextFieldElement: {
    prototype: HTMLAlaskaTextFieldElement;
    new (): HTMLAlaskaTextFieldElement;
  };

  interface HTMLAlaskaTextFieldEditorElement extends Components.AlaskaTextFieldEditor, HTMLStencilElement {}
  var HTMLAlaskaTextFieldEditorElement: {
    prototype: HTMLAlaskaTextFieldEditorElement;
    new (): HTMLAlaskaTextFieldEditorElement;
  };
  interface HTMLElementTagNameMap {
    'alaska-content-field': HTMLAlaskaContentFieldElement;
    'alaska-content-field-default': HTMLAlaskaContentFieldDefaultElement;
    'alaska-content-field-editor': HTMLAlaskaContentFieldEditorElement;
    'alaska-html-field': HTMLAlaskaHtmlFieldElement;
    'alaska-html-field-editor': HTMLAlaskaHtmlFieldEditorElement;
    'alaska-image-field': HTMLAlaskaImageFieldElement;
    'alaska-image-field-editor': HTMLAlaskaImageFieldEditorElement;
    'alaska-link-field': HTMLAlaskaLinkFieldElement;
    'alaska-link-field-editor': HTMLAlaskaLinkFieldEditorElement;
    'alaska-rich-text-editor': HTMLAlaskaRichTextEditorElement;
    'alaska-text-field': HTMLAlaskaTextFieldElement;
    'alaska-text-field-editor': HTMLAlaskaTextFieldEditorElement;
  }
}

declare namespace LocalJSX {
  interface AlaskaContentField extends JSXBase.HTMLAttributes<HTMLAlaskaContentFieldElement> {}
  interface AlaskaContentFieldDefault extends JSXBase.HTMLAttributes<HTMLAlaskaContentFieldDefaultElement> {
    'field'?: ContentField<any>;
  }
  interface AlaskaContentFieldEditor extends JSXBase.HTMLAttributes<HTMLAlaskaContentFieldEditorElement> {
    'field'?: ContentField<any>;
  }
  interface AlaskaHtmlField extends JSXBase.HTMLAttributes<HTMLAlaskaHtmlFieldElement> {
    'field'?: ContentField<any>;
  }
  interface AlaskaHtmlFieldEditor extends JSXBase.HTMLAttributes<HTMLAlaskaHtmlFieldEditorElement> {
    'field'?: ContentField<any>;
    'onEdit'?: (event: CustomEvent<any>) => void;
  }
  interface AlaskaImageField extends JSXBase.HTMLAttributes<HTMLAlaskaImageFieldElement> {
    'field'?: ContentField<ImageFieldData>;
  }
  interface AlaskaImageFieldEditor extends JSXBase.HTMLAttributes<HTMLAlaskaImageFieldEditorElement> {
    'field'?: ContentField<ImageFieldData>;
    'onEdit'?: (event: CustomEvent<any>) => void;
  }
  interface AlaskaLinkField extends JSXBase.HTMLAttributes<HTMLAlaskaLinkFieldElement> {
    'field'?: ContentField<LinkFieldData>;
  }
  interface AlaskaLinkFieldEditor extends JSXBase.HTMLAttributes<HTMLAlaskaLinkFieldEditorElement> {
    'field'?: ContentField<LinkFieldData>;
    'onEdit'?: (event: CustomEvent<any>) => void;
  }
  interface AlaskaRichTextEditor extends JSXBase.HTMLAttributes<HTMLAlaskaRichTextEditorElement> {
    'contentCss'?: string;
    'fontFormats'?: string;
    'height'?: string;
    'inline'?: boolean;
    'mobileTheme'?: string;
    'onOnActivate'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnAddUndo'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnBeforeAddUndo'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnBeforeExecCommand'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnBeforeGetContent'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnBeforePaste'?: (event: CustomEvent<EventObj<ClipboardEvent>>) => void;
    'onOnBeforeRenderUI'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnBeforeSetContent'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnBlur'?: (event: CustomEvent<EventObj<FocusEvent>>) => void;
    'onOnChange'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnClearUndos'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnClick'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnContextMenu'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnCopy'?: (event: CustomEvent<EventObj<ClipboardEvent>>) => void;
    'onOnCut'?: (event: CustomEvent<EventObj<ClipboardEvent>>) => void;
    'onOnDblclick'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnDeactivate'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnDirty'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnDrag'?: (event: CustomEvent<EventObj<DragEvent>>) => void;
    'onOnDragDrop'?: (event: CustomEvent<EventObj<DragEvent>>) => void;
    'onOnDragEnd'?: (event: CustomEvent<EventObj<DragEvent>>) => void;
    'onOnDragGesture'?: (event: CustomEvent<EventObj<DragEvent>>) => void;
    'onOnDragOver'?: (event: CustomEvent<EventObj<DragEvent>>) => void;
    'onOnDrop'?: (event: CustomEvent<EventObj<DragEvent>>) => void;
    'onOnExecCommand'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnFocus'?: (event: CustomEvent<EventObj<FocusEvent>>) => void;
    'onOnFocusIn'?: (event: CustomEvent<EventObj<FocusEvent>>) => void;
    'onOnFocusOut'?: (event: CustomEvent<EventObj<FocusEvent>>) => void;
    'onOnGetContent'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnHide'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnInit'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnKeyDown'?: (event: CustomEvent<EventObj<KeyboardEvent>>) => void;
    'onOnKeyPress'?: (event: CustomEvent<EventObj<KeyboardEvent>>) => void;
    'onOnKeyUp'?: (event: CustomEvent<EventObj<KeyboardEvent>>) => void;
    'onOnLoadContent'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnMouseDown'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnMouseEnter'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnMouseLeave'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnMouseMove'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnMouseOut'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnMouseOver'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnMouseUp'?: (event: CustomEvent<EventObj<MouseEvent>>) => void;
    'onOnNodeChange'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnObjectResizeStart'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnObjectResized'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnObjectSelected'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnPaste'?: (event: CustomEvent<EventObj<ClipboardEvent>>) => void;
    'onOnPostProcess'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnPostRender'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnPreInit'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnPreProcess'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnProgressState'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnRedo'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnRemove'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnReset'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnSaveContent'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnSetAttrib'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnSetContent'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnShow'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnSubmit'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnUndo'?: (event: CustomEvent<EventObj<any>>) => void;
    'onOnVisualAid'?: (event: CustomEvent<EventObj<any>>) => void;
    'onValueChanged'?: (event: CustomEvent<string>) => void;
    'plugins'?: string;
    'resize'?: boolean;
    'skin'?: string;
    'toolbar'?: string;
  }
  interface AlaskaTextField extends JSXBase.HTMLAttributes<HTMLAlaskaTextFieldElement> {
    'field'?: ContentField<string>;
  }
  interface AlaskaTextFieldEditor extends JSXBase.HTMLAttributes<HTMLAlaskaTextFieldEditorElement> {
    'field'?: ContentField<string>;
  }

  interface IntrinsicElements {
    'alaska-content-field': AlaskaContentField;
    'alaska-content-field-default': AlaskaContentFieldDefault;
    'alaska-content-field-editor': AlaskaContentFieldEditor;
    'alaska-html-field': AlaskaHtmlField;
    'alaska-html-field-editor': AlaskaHtmlFieldEditor;
    'alaska-image-field': AlaskaImageField;
    'alaska-image-field-editor': AlaskaImageFieldEditor;
    'alaska-link-field': AlaskaLinkField;
    'alaska-link-field-editor': AlaskaLinkFieldEditor;
    'alaska-rich-text-editor': AlaskaRichTextEditor;
    'alaska-text-field': AlaskaTextField;
    'alaska-text-field-editor': AlaskaTextFieldEditor;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


